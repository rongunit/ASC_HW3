Variant number = 73
Number of task = 3
Number of function = 6

Задание:
    Обобщенный артефакт, используемый в задании:
        Объемная геометрическая фигура.
    Базовые альтернативы (уникальные параметры, задающие отличительные признаки альтернатив):
        1.Шар (целочисленый радиус)
        2.Параллелепипед (три целочисленных ребра).
        3.Правильный тетраэдр (длина ребра - целое). 
    Общие для всех альтернатив переменные:
        Плотность материала фигуры.
    Общие для всех альтернатив функции:
        Вычисление объема.

Функция:
    Упорядочить элементы контейнера по возрастанию используя сор-
    тировку с помощью «дерева» (Heap Sort). В качестве ключей для сортировки
    и других действий используются результаты функции, общей для всех аль-
    тернатив.

Запуск программы:
    python main.py -f <inputFileName> <outputFileName>                             Чтобы использовать данные из файла <inputFileName>
            
    python main.py -n <positiveNumber> <outputFileName1> <outputFileName2>          Чтобы использовать сгенерированные данные
    
    python main.py --test <positiveNumber> <outputFileName>                         Чтобы сгенерировать тестовый файл с <positiveNumber>
                                                                                    элементов в <outputFileName>

Основные характеристики:
    Модулей реализации - 5
    Общий размер исходных файлов - 9.40 кб (5 файлов)
    Размер тестов - 160 кб (6 штук)
    Общий размер папки - 2.01 мб


Тесты:
    Тесты находятся в папке tests и имеют вид testN.txt, где N - номер теста.
    Результаты тестов:
    Время выполнения (минимальные и максимальные результаты за около 500 попыток) в текущей парадигме
        1-й тест:
                - 5 элементов
                - время выполнения: 0.0 s - 0.0012764930725097656 s
        2-й тест:
                - 100 элементов
                - время выполнения: 0.0009970664978027344 s - 0.003024578094482422 s
        3-й тест:
                - 1000 элементов
                - время выполнения: 0.0349118709564209 s - 0.1549057960510254 s
        4-й тест:
                - 10000 элементов
                - время выполнения: 0.5137135982513428 s - 0.7263181209564209 s
        5-й тест:
                - 5000 элементов
                - время выполнения: 0.23357057571411133 s - 0.5339248180389404 s

Не особо обоснованно, по причине отсутствия предыдущих домашних заданий, но посоветовавшись с интернетом и коллегами,
можно сказать, что программа на python жертвует производительностью ради простоты написания кода.